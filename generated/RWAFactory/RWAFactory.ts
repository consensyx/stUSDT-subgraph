// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PoolUpgraded extends ethereum.Event {
  get params(): PoolUpgraded__Params {
    return new PoolUpgraded__Params(this);
  }
}

export class PoolUpgraded__Params {
  _event: PoolUpgraded;

  constructor(event: PoolUpgraded) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RWAFactory__createPoolResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPool(): Address {
    return this.value0;
  }

  getPoolId(): BigInt {
    return this.value1;
  }
}

export class RWAFactory extends ethereum.SmartContract {
  static bind(address: Address): RWAFactory {
    return new RWAFactory("RWAFactory", address);
  }

  INITIALIZE_SELECTOR(): Bytes {
    let result = super.call(
      "INITIALIZE_SELECTOR",
      "INITIALIZE_SELECTOR():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_INITIALIZE_SELECTOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "INITIALIZE_SELECTOR",
      "INITIALIZE_SELECTOR():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_SELECTOR(): Bytes {
    let result = super.call(
      "UPGRADE_SELECTOR",
      "UPGRADE_SELECTOR():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_UPGRADE_SELECTOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADE_SELECTOR",
      "UPGRADE_SELECTOR():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createPool(
    _name: string,
    _symbol: string,
    _stablecoin: Address,
    _admin: Address,
    _minter: Address,
    _burner: Address,
    _rebaseAdmin: Address,
    _reserve: Address,
    _receipient: Address
  ): RWAFactory__createPoolResult {
    let result = super.call(
      "createPool",
      "createPool(string,string,address,address,address,address,address,address,address):(address,uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_stablecoin),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromAddress(_minter),
        ethereum.Value.fromAddress(_burner),
        ethereum.Value.fromAddress(_rebaseAdmin),
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_receipient)
      ]
    );

    return new RWAFactory__createPoolResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_createPool(
    _name: string,
    _symbol: string,
    _stablecoin: Address,
    _admin: Address,
    _minter: Address,
    _burner: Address,
    _rebaseAdmin: Address,
    _reserve: Address,
    _receipient: Address
  ): ethereum.CallResult<RWAFactory__createPoolResult> {
    let result = super.tryCall(
      "createPool",
      "createPool(string,string,address,address,address,address,address,address,address):(address,uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_stablecoin),
        ethereum.Value.fromAddress(_admin),
        ethereum.Value.fromAddress(_minter),
        ethereum.Value.fromAddress(_burner),
        ethereum.Value.fromAddress(_rebaseAdmin),
        ethereum.Value.fromAddress(_reserve),
        ethereum.Value.fromAddress(_receipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RWAFactory__createPoolResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pools(param0: BigInt): Address {
    let result = super.call("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _stablecoin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minter(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _burner(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _rebaseAdmin(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _reserve(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _receipient(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get poolId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradePoolsCall extends ethereum.Call {
  get inputs(): UpgradePoolsCall__Inputs {
    return new UpgradePoolsCall__Inputs(this);
  }

  get outputs(): UpgradePoolsCall__Outputs {
    return new UpgradePoolsCall__Outputs(this);
  }
}

export class UpgradePoolsCall__Inputs {
  _call: UpgradePoolsCall;

  constructor(call: UpgradePoolsCall) {
    this._call = call;
  }

  get _pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _implementations(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class UpgradePoolsCall__Outputs {
  _call: UpgradePoolsCall;

  constructor(call: UpgradePoolsCall) {
    this._call = call;
  }
}
