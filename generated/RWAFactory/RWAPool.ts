// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AdminTransferStarted extends ethereum.Event {
  get params(): AdminTransferStarted__Params {
    return new AdminTransferStarted__Params(this);
  }
}

export class AdminTransferStarted__Params {
  _event: AdminTransferStarted;

  constructor(event: AdminTransferStarted) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AdminTransferred extends ethereum.Event {
  get params(): AdminTransferred__Params {
    return new AdminTransferred__Params(this);
  }
}

export class AdminTransferred__Params {
  _event: AdminTransferred;

  constructor(event: AdminTransferred) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BlockListUpdated extends ethereum.Event {
  get params(): BlockListUpdated__Params {
    return new BlockListUpdated__Params(this);
  }
}

export class BlockListUpdated__Params {
  _event: BlockListUpdated;

  constructor(event: BlockListUpdated) {
    this._event = event;
  }

  get oldList(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newList(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BurnShares extends ethereum.Event {
  get params(): BurnShares__Params {
    return new BurnShares__Params(this);
  }
}

export class BurnShares__Params {
  _event: BurnShares;

  constructor(event: BurnShares) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get preRebaseTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get postRebaseTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BurnerUpdated extends ethereum.Event {
  get params(): BurnerUpdated__Params {
    return new BurnerUpdated__Params(this);
  }
}

export class BurnerUpdated__Params {
  _event: BurnerUpdated;

  constructor(event: BurnerUpdated) {
    this._event = event;
  }

  get newBurner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollectFee extends ethereum.Event {
  get params(): CollectFee__Params {
    return new CollectFee__Params(this);
  }
}

export class CollectFee__Params {
  _event: CollectFee;

  constructor(event: CollectFee) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class FeeReceipientUpdated extends ethereum.Event {
  get params(): FeeReceipientUpdated__Params {
    return new FeeReceipientUpdated__Params(this);
  }
}

export class FeeReceipientUpdated__Params {
  _event: FeeReceipientUpdated;

  constructor(event: FeeReceipientUpdated) {
    this._event = event;
  }

  get newFeeReceipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FundingFromReserve extends ethereum.Event {
  get params(): FundingFromReserve__Params {
    return new FundingFromReserve__Params(this);
  }
}

export class FundingFromReserve__Params {
  _event: FundingFromReserve;

  constructor(event: FundingFromReserve) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MaxRedeemQueueSizeUpdated extends ethereum.Event {
  get params(): MaxRedeemQueueSizeUpdated__Params {
    return new MaxRedeemQueueSizeUpdated__Params(this);
  }
}

export class MaxRedeemQueueSizeUpdated__Params {
  _event: MaxRedeemQueueSizeUpdated;

  constructor(event: MaxRedeemQueueSizeUpdated) {
    this._event = event;
  }

  get newMaxRedeemSize(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MaximumStakingLimitUpdated extends ethereum.Event {
  get params(): MaximumStakingLimitUpdated__Params {
    return new MaximumStakingLimitUpdated__Params(this);
  }
}

export class MaximumStakingLimitUpdated__Params {
  _event: MaximumStakingLimitUpdated;

  constructor(event: MaximumStakingLimitUpdated) {
    this._event = event;
  }

  get maxStakingLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinimumRedeemIntervalUpdated extends ethereum.Event {
  get params(): MinimumRedeemIntervalUpdated__Params {
    return new MinimumRedeemIntervalUpdated__Params(this);
  }
}

export class MinimumRedeemIntervalUpdated__Params {
  _event: MinimumRedeemIntervalUpdated;

  constructor(event: MinimumRedeemIntervalUpdated) {
    this._event = event;
  }

  get minRedeemInterval(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinimumRedeemUpdated extends ethereum.Event {
  get params(): MinimumRedeemUpdated__Params {
    return new MinimumRedeemUpdated__Params(this);
  }
}

export class MinimumRedeemUpdated__Params {
  _event: MinimumRedeemUpdated;

  constructor(event: MinimumRedeemUpdated) {
    this._event = event;
  }

  get minRedeemAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MinimumSubscribeUpdated extends ethereum.Event {
  get params(): MinimumSubscribeUpdated__Params {
    return new MinimumSubscribeUpdated__Params(this);
  }
}

export class MinimumSubscribeUpdated__Params {
  _event: MinimumSubscribeUpdated;

  constructor(event: MinimumSubscribeUpdated) {
    this._event = event;
  }

  get minSubscribeAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MintShares extends ethereum.Event {
  get params(): MintShares__Params {
    return new MintShares__Params(this);
  }
}

export class MintShares__Params {
  _event: MintShares;

  constructor(event: MintShares) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MinterUpdated extends ethereum.Event {
  get params(): MinterUpdated__Params {
    return new MinterUpdated__Params(this);
  }
}

export class MinterUpdated__Params {
  _event: MinterUpdated;

  constructor(event: MinterUpdated) {
    this._event = event;
  }

  get newMinter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OperatorUpdated extends ethereum.Event {
  get params(): OperatorUpdated__Params {
    return new OperatorUpdated__Params(this);
  }
}

export class OperatorUpdated__Params {
  _event: OperatorUpdated;

  constructor(event: OperatorUpdated) {
    this._event = event;
  }

  get newOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProtocolFeeUpdated extends ethereum.Event {
  get params(): ProtocolFeeUpdated__Params {
    return new ProtocolFeeUpdated__Params(this);
  }
}

export class ProtocolFeeUpdated__Params {
  _event: ProtocolFeeUpdated;

  constructor(event: ProtocolFeeUpdated) {
    this._event = event;
  }

  get newSubscribeFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRedeemFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolUpdated extends ethereum.Event {
  get params(): ProtocolUpdated__Params {
    return new ProtocolUpdated__Params(this);
  }
}

export class ProtocolUpdated__Params {
  _event: ProtocolUpdated;

  constructor(event: ProtocolUpdated) {
    this._event = event;
  }

  get newProtocol(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Rebase extends ethereum.Event {
  get params(): Rebase__Params {
    return new Rebase__Params(this);
  }
}

export class Rebase__Params {
  _event: Rebase;

  constructor(event: Rebase) {
    this._event = event;
  }

  get prevNetValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newNetValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RebaseAdminUpdated extends ethereum.Event {
  get params(): RebaseAdminUpdated__Params {
    return new RebaseAdminUpdated__Params(this);
  }
}

export class RebaseAdminUpdated__Params {
  _event: RebaseAdminUpdated;

  constructor(event: RebaseAdminUpdated) {
    this._event = event;
  }

  get newBurner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RebaseIntervalUpdated extends ethereum.Event {
  get params(): RebaseIntervalUpdated__Params {
    return new RebaseIntervalUpdated__Params(this);
  }
}

export class RebaseIntervalUpdated__Params {
  _event: RebaseIntervalUpdated;

  constructor(event: RebaseIntervalUpdated) {
    this._event = event;
  }

  get prevRebaseInterval(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRebaseInterval(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RebaseRateLimitUpdated extends ethereum.Event {
  get params(): RebaseRateLimitUpdated__Params {
    return new RebaseRateLimitUpdated__Params(this);
  }
}

export class RebaseRateLimitUpdated__Params {
  _event: RebaseRateLimitUpdated;

  constructor(event: RebaseRateLimitUpdated) {
    this._event = event;
  }

  get newProfitRateLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLossRateLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedemptionPaused extends ethereum.Event {
  get params(): RedemptionPaused__Params {
    return new RedemptionPaused__Params(this);
  }
}

export class RedemptionPaused__Params {
  _event: RedemptionPaused;

  constructor(event: RedemptionPaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RedemptionUnpaused extends ethereum.Event {
  get params(): RedemptionUnpaused__Params {
    return new RedemptionUnpaused__Params(this);
  }
}

export class RedemptionUnpaused__Params {
  _event: RedemptionUnpaused;

  constructor(event: RedemptionUnpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReserveUpdated extends ethereum.Event {
  get params(): ReserveUpdated__Params {
    return new ReserveUpdated__Params(this);
  }
}

export class ReserveUpdated__Params {
  _event: ReserveUpdated;

  constructor(event: ReserveUpdated) {
    this._event = event;
  }

  get newReserve(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubscribeT0 extends ethereum.Event {
  get params(): SubscribeT0__Params {
    return new SubscribeT0__Params(this);
  }
}

export class SubscribeT0__Params {
  _event: SubscribeT0;

  constructor(event: SubscribeT0) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubscribeT1 extends ethereum.Event {
  get params(): SubscribeT1__Params {
    return new SubscribeT1__Params(this);
  }
}

export class SubscribeT1__Params {
  _event: SubscribeT1;

  constructor(event: SubscribeT1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubscriptionPaused extends ethereum.Event {
  get params(): SubscriptionPaused__Params {
    return new SubscriptionPaused__Params(this);
  }
}

export class SubscriptionPaused__Params {
  _event: SubscriptionPaused;

  constructor(event: SubscriptionPaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubscriptionUnpaused extends ethereum.Event {
  get params(): SubscriptionUnpaused__Params {
    return new SubscriptionUnpaused__Params(this);
  }
}

export class SubscriptionUnpaused__Params {
  _event: SubscriptionUnpaused;

  constructor(event: SubscriptionUnpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferShares extends ethereum.Event {
  get params(): TransferShares__Params {
    return new TransferShares__Params(this);
  }
}

export class TransferShares__Params {
  _event: TransferShares;

  constructor(event: TransferShares) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sharesValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawToReserve extends ethereum.Event {
  get params(): WithdrawToReserve__Params {
    return new WithdrawToReserve__Params(this);
  }
}

export class WithdrawToReserve__Params {
  _event: WithdrawToReserve;

  constructor(event: WithdrawToReserve) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RWAPool__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class RWAPool__userRedeemQueueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_begin(): BigInt {
    return this.value0;
  }

  get_end(): BigInt {
    return this.value1;
  }
}

export class RWAPool extends ethereum.SmartContract {
  static bind(address: Address): RWAPool {
    return new RWAPool("RWAPool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REBASE_BASIS_POINTS(): BigInt {
    let result = super.call(
      "REBASE_BASIS_POINTS",
      "REBASE_BASIS_POINTS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_REBASE_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REBASE_BASIS_POINTS",
      "REBASE_BASIS_POINTS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  T0_AVAILABLE(): BigInt {
    let result = super.call("T0_AVAILABLE", "T0_AVAILABLE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_T0_AVAILABLE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("T0_AVAILABLE", "T0_AVAILABLE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_BASIS_POINTS(): BigInt {
    let result = super.call(
      "TOTAL_BASIS_POINTS",
      "TOTAL_BASIS_POINTS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_BASIS_POINTS",
      "TOTAL_BASIS_POINTS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableShares(_account: Address): BigInt {
    let result = super.call(
      "availableShares",
      "availableShares(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_availableShares(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableShares",
      "availableShares(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blocklist(): Address {
    let result = super.call("blocklist", "blocklist():(address)", []);

    return result[0].toAddress();
  }

  try_blocklist(): ethereum.CallResult<Address> {
    let result = super.tryCall("blocklist", "blocklist():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bufferedFund(): BigInt {
    let result = super.call("bufferedFund", "bufferedFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bufferedFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bufferedFund", "bufferedFund():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burner(): Address {
    let result = super.call("burner", "burner():(address)", []);

    return result[0].toAddress();
  }

  try_burner(): ethereum.CallResult<Address> {
    let result = super.tryCall("burner", "burner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  eip712Domain(): RWAPool__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new RWAPool__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<RWAPool__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RWAPool__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeReceipient(): Address {
    let result = super.call("feeReceipient", "feeReceipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeReceipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeReceipient",
      "feeReceipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundOf(_account: Address): BigInt {
    let result = super.call("fundOf", "fundOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_fundOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundOf", "fundOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSharesByUnderlying(_usd: BigInt): BigInt {
    let result = super.call(
      "getSharesByUnderlying",
      "getSharesByUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_usd)]
    );

    return result[0].toBigInt();
  }

  try_getSharesByUnderlying(_usd: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSharesByUnderlying",
      "getSharesByUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_usd)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingByShares(_sharesAmount: BigInt): BigInt {
    let result = super.call(
      "getUnderlyingByShares",
      "getUnderlyingByShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sharesAmount)]
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingByShares(
    _sharesAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingByShares",
      "getUnderlyingByShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sharesAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRebaseTime(): BigInt {
    let result = super.call("lastRebaseTime", "lastRebaseTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastRebaseTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRebaseTime",
      "lastRebaseTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lossRateLimit(): BigInt {
    let result = super.call("lossRateLimit", "lossRateLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lossRateLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lossRateLimit",
      "lossRateLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeemQueueSize(): BigInt {
    let result = super.call(
      "maxRedeemQueueSize",
      "maxRedeemQueueSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxRedeemQueueSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRedeemQueueSize",
      "maxRedeemQueueSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maximumTotalStakingLimit(): BigInt {
    let result = super.call(
      "maximumTotalStakingLimit",
      "maximumTotalStakingLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumTotalStakingLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumTotalStakingLimit",
      "maximumTotalStakingLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumRedeemAmount(): BigInt {
    let result = super.call(
      "minimumRedeemAmount",
      "minimumRedeemAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumRedeemAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumRedeemAmount",
      "minimumRedeemAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumRedeemInterval(): BigInt {
    let result = super.call(
      "minimumRedeemInterval",
      "minimumRedeemInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumRedeemInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumRedeemInterval",
      "minimumRedeemInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumSubscribeAmount(): BigInt {
    let result = super.call(
      "minimumSubscribeAmount",
      "minimumSubscribeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumSubscribeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumSubscribeAmount",
      "minimumSubscribeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minter(): Address {
    let result = super.call("minter", "minter():(address)", []);

    return result[0].toAddress();
  }

  try_minter(): ethereum.CallResult<Address> {
    let result = super.tryCall("minter", "minter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  profitRateLimit(): BigInt {
    let result = super.call(
      "profitRateLimit",
      "profitRateLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_profitRateLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitRateLimit",
      "profitRateLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rebaseAdmin(): Address {
    let result = super.call("rebaseAdmin", "rebaseAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_rebaseAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("rebaseAdmin", "rebaseAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebaseInterval(): BigInt {
    let result = super.call("rebaseInterval", "rebaseInterval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebaseInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseInterval",
      "rebaseInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemFee(): BigInt {
    let result = super.call("redeemFee", "redeemFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_redeemFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeemFee", "redeemFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemptionPaused(): boolean {
    let result = super.call(
      "redemptionPaused",
      "redemptionPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_redemptionPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "redemptionPaused",
      "redemptionPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reserve(): Address {
    let result = super.call("reserve", "reserve():(address)", []);

    return result[0].toAddress();
  }

  try_reserve(): ethereum.CallResult<Address> {
    let result = super.tryCall("reserve", "reserve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reservedFund(): BigInt {
    let result = super.call("reservedFund", "reservedFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reservedFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reservedFund", "reservedFund():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shares(param0: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_shares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesOf(_account: Address): BigInt {
    let result = super.call("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_sharesOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stablecoin(): Address {
    let result = super.call("stablecoin", "stablecoin():(address)", []);

    return result[0].toAddress();
  }

  try_stablecoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("stablecoin", "stablecoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscribeFee(): BigInt {
    let result = super.call("subscribeFee", "subscribeFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_subscribeFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("subscribeFee", "subscribeFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subscriptionPaused(): boolean {
    let result = super.call(
      "subscriptionPaused",
      "subscriptionPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_subscriptionPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "subscriptionPaused",
      "subscriptionPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalLockedFund(): BigInt {
    let result = super.call(
      "totalLockedFund",
      "totalLockedFund():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalLockedFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLockedFund",
      "totalLockedFund():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPendingRedeemShares(): BigInt {
    let result = super.call(
      "totalPendingRedeemShares",
      "totalPendingRedeemShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPendingRedeemShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPendingRedeemShares",
      "totalPendingRedeemShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnconfirmedFund(): BigInt {
    let result = super.call(
      "totalUnconfirmedFund",
      "totalUnconfirmedFund():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnconfirmedFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnconfirmedFund",
      "totalUnconfirmedFund():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferShares(_recipient: Address, _sharesAmount: BigInt): BigInt {
    let result = super.call(
      "transferShares",
      "transferShares(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_sharesAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferShares(
    _recipient: Address,
    _sharesAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferShares",
      "transferShares(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_sharesAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transientInFund(): BigInt {
    let result = super.call(
      "transientInFund",
      "transientInFund():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transientInFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transientInFund",
      "transientInFund():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transientOutFund(): BigInt {
    let result = super.call(
      "transientOutFund",
      "transientOutFund():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transientOutFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transientOutFund",
      "transientOutFund():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unconfirmedFund(param0: Address): BigInt {
    let result = super.call(
      "unconfirmedFund",
      "unconfirmedFund(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_unconfirmedFund(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unconfirmedFund",
      "unconfirmedFund(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userPendingRedeemShares(param0: Address): BigInt {
    let result = super.call(
      "userPendingRedeemShares",
      "userPendingRedeemShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userPendingRedeemShares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPendingRedeemShares",
      "userPendingRedeemShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRedeemQueue(param0: Address): RWAPool__userRedeemQueueResult {
    let result = super.call(
      "userRedeemQueue",
      "userRedeemQueue(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RWAPool__userRedeemQueueResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userRedeemQueue(
    param0: Address
  ): ethereum.CallResult<RWAPool__userRedeemQueueResult> {
    let result = super.tryCall(
      "userRedeemQueue",
      "userRedeemQueue(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RWAPool__userRedeemQueueResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class AcceptAdminCall extends ethereum.Call {
  get inputs(): AcceptAdminCall__Inputs {
    return new AcceptAdminCall__Inputs(this);
  }

  get outputs(): AcceptAdminCall__Outputs {
    return new AcceptAdminCall__Outputs(this);
  }
}

export class AcceptAdminCall__Inputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class AcceptAdminCall__Outputs {
  _call: AcceptAdminCall;

  constructor(call: AcceptAdminCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnSharesCall extends ethereum.Call {
  get inputs(): BurnSharesCall__Inputs {
    return new BurnSharesCall__Inputs(this);
  }

  get outputs(): BurnSharesCall__Outputs {
    return new BurnSharesCall__Outputs(this);
  }
}

export class BurnSharesCall__Inputs {
  _call: BurnSharesCall;

  constructor(call: BurnSharesCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BurnSharesCall__Outputs {
  _call: BurnSharesCall;

  constructor(call: BurnSharesCall) {
    this._call = call;
  }
}

export class CollectFeeCall extends ethereum.Call {
  get inputs(): CollectFeeCall__Inputs {
    return new CollectFeeCall__Inputs(this);
  }

  get outputs(): CollectFeeCall__Outputs {
    return new CollectFeeCall__Outputs(this);
  }
}

export class CollectFeeCall__Inputs {
  _call: CollectFeeCall;

  constructor(call: CollectFeeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollectFeeCall__Outputs {
  _call: CollectFeeCall;

  constructor(call: CollectFeeCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FundingFromReserveCall extends ethereum.Call {
  get inputs(): FundingFromReserveCall__Inputs {
    return new FundingFromReserveCall__Inputs(this);
  }

  get outputs(): FundingFromReserveCall__Outputs {
    return new FundingFromReserveCall__Outputs(this);
  }
}

export class FundingFromReserveCall__Inputs {
  _call: FundingFromReserveCall;

  constructor(call: FundingFromReserveCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundingFromReserveCall__Outputs {
  _call: FundingFromReserveCall;

  constructor(call: FundingFromReserveCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _stablecoin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _minter(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _burner(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _rebaseAdmin(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _reserve(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _receipient(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintSharesCall extends ethereum.Call {
  get inputs(): MintSharesCall__Inputs {
    return new MintSharesCall__Inputs(this);
  }

  get outputs(): MintSharesCall__Outputs {
    return new MintSharesCall__Outputs(this);
  }
}

export class MintSharesCall__Inputs {
  _call: MintSharesCall;

  constructor(call: MintSharesCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class MintSharesCall__Outputs {
  _call: MintSharesCall;

  constructor(call: MintSharesCall) {
    this._call = call;
  }
}

export class PauseRedemptionCall extends ethereum.Call {
  get inputs(): PauseRedemptionCall__Inputs {
    return new PauseRedemptionCall__Inputs(this);
  }

  get outputs(): PauseRedemptionCall__Outputs {
    return new PauseRedemptionCall__Outputs(this);
  }
}

export class PauseRedemptionCall__Inputs {
  _call: PauseRedemptionCall;

  constructor(call: PauseRedemptionCall) {
    this._call = call;
  }
}

export class PauseRedemptionCall__Outputs {
  _call: PauseRedemptionCall;

  constructor(call: PauseRedemptionCall) {
    this._call = call;
  }
}

export class PauseSubscriptionCall extends ethereum.Call {
  get inputs(): PauseSubscriptionCall__Inputs {
    return new PauseSubscriptionCall__Inputs(this);
  }

  get outputs(): PauseSubscriptionCall__Outputs {
    return new PauseSubscriptionCall__Outputs(this);
  }
}

export class PauseSubscriptionCall__Inputs {
  _call: PauseSubscriptionCall;

  constructor(call: PauseSubscriptionCall) {
    this._call = call;
  }
}

export class PauseSubscriptionCall__Outputs {
  _call: PauseSubscriptionCall;

  constructor(call: PauseSubscriptionCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RebaseCall extends ethereum.Call {
  get inputs(): RebaseCall__Inputs {
    return new RebaseCall__Inputs(this);
  }

  get outputs(): RebaseCall__Outputs {
    return new RebaseCall__Outputs(this);
  }
}

export class RebaseCall__Inputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }

  get _netValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RebaseCall__Outputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class SetBlockListCall extends ethereum.Call {
  get inputs(): SetBlockListCall__Inputs {
    return new SetBlockListCall__Inputs(this);
  }

  get outputs(): SetBlockListCall__Outputs {
    return new SetBlockListCall__Outputs(this);
  }
}

export class SetBlockListCall__Inputs {
  _call: SetBlockListCall;

  constructor(call: SetBlockListCall) {
    this._call = call;
  }

  get _newBlockList(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBlockListCall__Outputs {
  _call: SetBlockListCall;

  constructor(call: SetBlockListCall) {
    this._call = call;
  }
}

export class SetBurnerCall extends ethereum.Call {
  get inputs(): SetBurnerCall__Inputs {
    return new SetBurnerCall__Inputs(this);
  }

  get outputs(): SetBurnerCall__Outputs {
    return new SetBurnerCall__Outputs(this);
  }
}

export class SetBurnerCall__Inputs {
  _call: SetBurnerCall;

  constructor(call: SetBurnerCall) {
    this._call = call;
  }

  get _newBurner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnerCall__Outputs {
  _call: SetBurnerCall;

  constructor(call: SetBurnerCall) {
    this._call = call;
  }
}

export class SetFeeReceipientCall extends ethereum.Call {
  get inputs(): SetFeeReceipientCall__Inputs {
    return new SetFeeReceipientCall__Inputs(this);
  }

  get outputs(): SetFeeReceipientCall__Outputs {
    return new SetFeeReceipientCall__Outputs(this);
  }
}

export class SetFeeReceipientCall__Inputs {
  _call: SetFeeReceipientCall;

  constructor(call: SetFeeReceipientCall) {
    this._call = call;
  }

  get _newReceipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeReceipientCall__Outputs {
  _call: SetFeeReceipientCall;

  constructor(call: SetFeeReceipientCall) {
    this._call = call;
  }
}

export class SetMaxRedeemQueueSizeCall extends ethereum.Call {
  get inputs(): SetMaxRedeemQueueSizeCall__Inputs {
    return new SetMaxRedeemQueueSizeCall__Inputs(this);
  }

  get outputs(): SetMaxRedeemQueueSizeCall__Outputs {
    return new SetMaxRedeemQueueSizeCall__Outputs(this);
  }
}

export class SetMaxRedeemQueueSizeCall__Inputs {
  _call: SetMaxRedeemQueueSizeCall;

  constructor(call: SetMaxRedeemQueueSizeCall) {
    this._call = call;
  }

  get _newMaxRedeemSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxRedeemQueueSizeCall__Outputs {
  _call: SetMaxRedeemQueueSizeCall;

  constructor(call: SetMaxRedeemQueueSizeCall) {
    this._call = call;
  }
}

export class SetMaximumTotalStakingLimitCall extends ethereum.Call {
  get inputs(): SetMaximumTotalStakingLimitCall__Inputs {
    return new SetMaximumTotalStakingLimitCall__Inputs(this);
  }

  get outputs(): SetMaximumTotalStakingLimitCall__Outputs {
    return new SetMaximumTotalStakingLimitCall__Outputs(this);
  }
}

export class SetMaximumTotalStakingLimitCall__Inputs {
  _call: SetMaximumTotalStakingLimitCall;

  constructor(call: SetMaximumTotalStakingLimitCall) {
    this._call = call;
  }

  get _maxStakingLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaximumTotalStakingLimitCall__Outputs {
  _call: SetMaximumTotalStakingLimitCall;

  constructor(call: SetMaximumTotalStakingLimitCall) {
    this._call = call;
  }
}

export class SetMinimumRedeemAmountCall extends ethereum.Call {
  get inputs(): SetMinimumRedeemAmountCall__Inputs {
    return new SetMinimumRedeemAmountCall__Inputs(this);
  }

  get outputs(): SetMinimumRedeemAmountCall__Outputs {
    return new SetMinimumRedeemAmountCall__Outputs(this);
  }
}

export class SetMinimumRedeemAmountCall__Inputs {
  _call: SetMinimumRedeemAmountCall;

  constructor(call: SetMinimumRedeemAmountCall) {
    this._call = call;
  }

  get _minRedeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumRedeemAmountCall__Outputs {
  _call: SetMinimumRedeemAmountCall;

  constructor(call: SetMinimumRedeemAmountCall) {
    this._call = call;
  }
}

export class SetMinimumRedeemIntervalCall extends ethereum.Call {
  get inputs(): SetMinimumRedeemIntervalCall__Inputs {
    return new SetMinimumRedeemIntervalCall__Inputs(this);
  }

  get outputs(): SetMinimumRedeemIntervalCall__Outputs {
    return new SetMinimumRedeemIntervalCall__Outputs(this);
  }
}

export class SetMinimumRedeemIntervalCall__Inputs {
  _call: SetMinimumRedeemIntervalCall;

  constructor(call: SetMinimumRedeemIntervalCall) {
    this._call = call;
  }

  get _minRedeemInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumRedeemIntervalCall__Outputs {
  _call: SetMinimumRedeemIntervalCall;

  constructor(call: SetMinimumRedeemIntervalCall) {
    this._call = call;
  }
}

export class SetMinimumSubscribeAmountCall extends ethereum.Call {
  get inputs(): SetMinimumSubscribeAmountCall__Inputs {
    return new SetMinimumSubscribeAmountCall__Inputs(this);
  }

  get outputs(): SetMinimumSubscribeAmountCall__Outputs {
    return new SetMinimumSubscribeAmountCall__Outputs(this);
  }
}

export class SetMinimumSubscribeAmountCall__Inputs {
  _call: SetMinimumSubscribeAmountCall;

  constructor(call: SetMinimumSubscribeAmountCall) {
    this._call = call;
  }

  get _minSubscribeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumSubscribeAmountCall__Outputs {
  _call: SetMinimumSubscribeAmountCall;

  constructor(call: SetMinimumSubscribeAmountCall) {
    this._call = call;
  }
}

export class SetMinterCall extends ethereum.Call {
  get inputs(): SetMinterCall__Inputs {
    return new SetMinterCall__Inputs(this);
  }

  get outputs(): SetMinterCall__Outputs {
    return new SetMinterCall__Outputs(this);
  }
}

export class SetMinterCall__Inputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }

  get _newMinter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMinterCall__Outputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this);
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }

  get _newSubscribeFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newRedeemFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }
}

export class SetRebaseAdminCall extends ethereum.Call {
  get inputs(): SetRebaseAdminCall__Inputs {
    return new SetRebaseAdminCall__Inputs(this);
  }

  get outputs(): SetRebaseAdminCall__Outputs {
    return new SetRebaseAdminCall__Outputs(this);
  }
}

export class SetRebaseAdminCall__Inputs {
  _call: SetRebaseAdminCall;

  constructor(call: SetRebaseAdminCall) {
    this._call = call;
  }

  get _newRebaseAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRebaseAdminCall__Outputs {
  _call: SetRebaseAdminCall;

  constructor(call: SetRebaseAdminCall) {
    this._call = call;
  }
}

export class SetRebaseIntervalCall extends ethereum.Call {
  get inputs(): SetRebaseIntervalCall__Inputs {
    return new SetRebaseIntervalCall__Inputs(this);
  }

  get outputs(): SetRebaseIntervalCall__Outputs {
    return new SetRebaseIntervalCall__Outputs(this);
  }
}

export class SetRebaseIntervalCall__Inputs {
  _call: SetRebaseIntervalCall;

  constructor(call: SetRebaseIntervalCall) {
    this._call = call;
  }

  get _newRebaseInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebaseIntervalCall__Outputs {
  _call: SetRebaseIntervalCall;

  constructor(call: SetRebaseIntervalCall) {
    this._call = call;
  }
}

export class SetRebaseRateLimitCall extends ethereum.Call {
  get inputs(): SetRebaseRateLimitCall__Inputs {
    return new SetRebaseRateLimitCall__Inputs(this);
  }

  get outputs(): SetRebaseRateLimitCall__Outputs {
    return new SetRebaseRateLimitCall__Outputs(this);
  }
}

export class SetRebaseRateLimitCall__Inputs {
  _call: SetRebaseRateLimitCall;

  constructor(call: SetRebaseRateLimitCall) {
    this._call = call;
  }

  get _newProfitRateLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newLossRateLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRebaseRateLimitCall__Outputs {
  _call: SetRebaseRateLimitCall;

  constructor(call: SetRebaseRateLimitCall) {
    this._call = call;
  }
}

export class SetReserveCall extends ethereum.Call {
  get inputs(): SetReserveCall__Inputs {
    return new SetReserveCall__Inputs(this);
  }

  get outputs(): SetReserveCall__Outputs {
    return new SetReserveCall__Outputs(this);
  }
}

export class SetReserveCall__Inputs {
  _call: SetReserveCall;

  constructor(call: SetReserveCall) {
    this._call = call;
  }

  get _newReserve(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReserveCall__Outputs {
  _call: SetReserveCall;

  constructor(call: SetReserveCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferAdminCall extends ethereum.Call {
  get inputs(): TransferAdminCall__Inputs {
    return new TransferAdminCall__Inputs(this);
  }

  get outputs(): TransferAdminCall__Outputs {
    return new TransferAdminCall__Outputs(this);
  }
}

export class TransferAdminCall__Inputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }

  get _newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAdminCall__Outputs {
  _call: TransferAdminCall;

  constructor(call: TransferAdminCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferSharesCall extends ethereum.Call {
  get inputs(): TransferSharesCall__Inputs {
    return new TransferSharesCall__Inputs(this);
  }

  get outputs(): TransferSharesCall__Outputs {
    return new TransferSharesCall__Outputs(this);
  }
}

export class TransferSharesCall__Inputs {
  _call: TransferSharesCall;

  constructor(call: TransferSharesCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferSharesCall__Outputs {
  _call: TransferSharesCall;

  constructor(call: TransferSharesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnpauseRedemptionCall extends ethereum.Call {
  get inputs(): UnpauseRedemptionCall__Inputs {
    return new UnpauseRedemptionCall__Inputs(this);
  }

  get outputs(): UnpauseRedemptionCall__Outputs {
    return new UnpauseRedemptionCall__Outputs(this);
  }
}

export class UnpauseRedemptionCall__Inputs {
  _call: UnpauseRedemptionCall;

  constructor(call: UnpauseRedemptionCall) {
    this._call = call;
  }
}

export class UnpauseRedemptionCall__Outputs {
  _call: UnpauseRedemptionCall;

  constructor(call: UnpauseRedemptionCall) {
    this._call = call;
  }
}

export class UnpauseSubscriptionCall extends ethereum.Call {
  get inputs(): UnpauseSubscriptionCall__Inputs {
    return new UnpauseSubscriptionCall__Inputs(this);
  }

  get outputs(): UnpauseSubscriptionCall__Outputs {
    return new UnpauseSubscriptionCall__Outputs(this);
  }
}

export class UnpauseSubscriptionCall__Inputs {
  _call: UnpauseSubscriptionCall;

  constructor(call: UnpauseSubscriptionCall) {
    this._call = call;
  }
}

export class UnpauseSubscriptionCall__Outputs {
  _call: UnpauseSubscriptionCall;

  constructor(call: UnpauseSubscriptionCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawToReserveCall extends ethereum.Call {
  get inputs(): WithdrawToReserveCall__Inputs {
    return new WithdrawToReserveCall__Inputs(this);
  }

  get outputs(): WithdrawToReserveCall__Outputs {
    return new WithdrawToReserveCall__Outputs(this);
  }
}

export class WithdrawToReserveCall__Inputs {
  _call: WithdrawToReserveCall;

  constructor(call: WithdrawToReserveCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawToReserveCall__Outputs {
  _call: WithdrawToReserveCall;

  constructor(call: WithdrawToReserveCall) {
    this._call = call;
  }
}
